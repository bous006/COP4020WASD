HW 3

[Question 1]
module TotalHeight where
import WindowLayout

totalHeight:: WindowLayout -> Int
totalHeight Window {wname=nm, width=w, height=h} = h
totalHeight (Horizontal(wl)) = getHoriz(wl)
totalHeight (Vertical(wl)) = getVert(wl)

getHoriz:: [WindowLayout] -> Int
getHoriz [] = 0
getHoriz (gh:ghl) = max (totalHeight(gh))(getHoriz(ghl))

getVert:: [WindowLayout] -> Int
getVert [] = 0
getVert (gv:gvl) = totalHeight(gv) + getVert(gvl)

[Question 2]
module SplitScreen where
import WindowLayout

splitScreen:: String -> WindowLayout -> WindowLayout
splitScreen name Window {wname=nm, width=w, height=h} 
    |name == nm = (Horizontal [Window{wname=nm, width=w `div` 2, height=h}, Window{wname=nm, width=w `div` 2, height=h}])
    |otherwise = Window{wname=nm, width=w, height=h}
splitScreen name (Horizontal(wl))
    |wl==[] = (Horizontal(wl))
    |otherwise = (Horizontal(splitWL name wl))
splitScreen name (Vertical(wl))
    |wl==[] = (Vertical(wl))
    |otherwise = (Vertical(splitWL name wl))

splitWL:: String -> [WindowLayout] -> [WindowLayout]
splitWL name [w] = (splitScreen name w):[]
splitWL name (w:wl) = (splitScreen name w):(splitWL name wl)


----------------------------------------------------------------------------------------------------------
HW 2

[Question 1]:
type Vector = [Double]
scale :: Double -> Vector -> Vector
scale x vs = [x*v| v <- vs]
add :: Vector -> Vector -> Vector
add [] [] = []
add (v1:vs1) (v2:vs2) = v1+v2:add vs1 vs2
dot :: Vector -> Vector -> Double
dot [] [] = 0
dot (v1:vs1) (v2:vs2) = v1*v2 + dot vs1 vs2

[Question 2]:
module ApplyToList where
import BinaryRelation

applyRel :: (Eq k) => k -> (BinaryRelation k v) -> [v]
applyRel key xys = [y | (x,y) <- xys, x==key]	

applyToList :: (Eq k) => [k] -> (BinaryRelation k v) -> [v]
applyToList _ [] = []
applyToList [] _ = []
applyToList [] [] = []
applyToList (key:keys) xys = applyRel key xys ++ applyToList keys xys

[Question 3]:
module BinaryRelationOps where
import BinaryRelation

project1 :: (BinaryRelation a b) -> [a]
project1 xys = [x | (x, y) <- xys]

project2 :: (BinaryRelation a b) -> [b]
project2 xys = [y | (x, y) <- xys]

select :: ((a, b)-> Bool) -> (BinaryRelation a b) -> (BinaryRelation a b)
select zs xys = []

compose :: Eq b=> (BinaryRelation a b) -> (BinaryRelation b c) -> (BinaryRelation a c)
compose rel1 rel2 = [(x1,y2) | (x1, y1) <- rel1, (x2, y2) <- rel2, y1==x2]

[Question 4]:

N/A

[Question 5]:
module Hep where

hep :: [String] -> [String]
hep txt
	|txt == [] = []
	|t == "you" = "u":hep (tail txt)
	|t == "are" = "r":hep (tail txt)
	|t == "your" = "ur":hep (tail txt)
	|t3 == ["by", "the", "way"] = "btw":hep (drop 3 txt)
	|t3 == ["for", "your", "information"] = "fyi":hep (drop 3 txt) 
	|t == "boyfriend" = "bf":hep (tail txt)
	|t == "girlfriend" = "gf":hep (tail txt)
	|t3 == ["be", "right", "back"] = "brb":hep (drop 3 txt)
	|t3 == ["laughing", "out", "loud"] = "lol":hep (drop 3 txt)
	|t2 == ["see", "you"] = "cya":hep (drop 2 txt)
	|t2 == ["I", "will"] = "I'll":hep (drop 2 txt)
	|t == "great" = "gr8":hep (tail txt)
	|otherwise = t:hep (tail txt)
    where t = (head txt)
          t2 = (take 2 txt)
          t3 = (take 3 txt)

[Question 6]:
module ListMin where

listMin :: (Ord a) => [a] -> a
listMin [l] = l
listMin (l:lst) = min l (listMin lst)

[Question 7]:
module WhatIndex where

whatIndex :: (Eq a) => a -> [a] -> Integer
whatIndex sought [] = -1
whatIndex sought (l:lst)
	| sought == l = 0
	| otherwise = if x == -1 then -1 else 1 + x
	where x = whatIndex sought lst



----------------------------------------------------------------------------------------------------------
HW 1
1:
average3 :: (Double, Double, Double) -> Double
average3 (x, y, z) = (x + y + z) / 3

2a: 
5
2b:
legal: 5
illegal: 1, 2, 3, 4, 6
2c:
([3,4,7,5,8],[3,4,7,5,8])


3a:
add10_list_comp :: [Integer]  -> [Integer] 
add10_list_comp (x) = map (+10) x
3b: 
add10_list_rec :: [Integer]  -> [Integer] 
add10_list_rec [] = []
add10_list_rec (x:xs) = [x+10] ++ (add10_list_comp xs)

4:
cubeOdds :: [Integer] -> [Integer]
cubeOdds [] = []
cubeOdds [x] = [x*x*x]
cubeOdds (x:y:xs) = x*x*x : y : cubeOdds xs

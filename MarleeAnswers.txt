HW5

concat.erl

-module(concat).
-export([concat/1]).
-spec concat(Lists :: [[T]]) -> [T].

concat([]) -> [];
concat([First|Rest]) -> First ++ (concat(Rest)).


substaddr.erl

-module(substaddr).
-include("salesdata.hrl").
-export([substaddr/3]).
-import (salesdata, [store/2, group/2]).
-spec substaddr(salesdata:salesdata(), string(), string()) -> salesdata:salesdata().

substaddr(#store{address = Addr, amounts = Amts}, New, Old) ->
	if
		(Addr == Old) -> #store{address = New, amounts = Amts};
		true -> #store{address = Addr, amounts = Amts}
	end;

substaddr(#group{gname = Gname, members = Memberlist}, New, Old) -> #group{gname = Gname, members = [substaddr(X, New, Old) || X <- Memberlist]}.


count_matching.erl

-module(count_matching).
-export([count_matching/2]).
-spec count_matching (fun((T) -> boolean()), list(T)) -> non_neg_integer().

count_matching(Pred, []) -> 0;

count_matching(Pred, [H|T]) ->
  case (Pred(H)) of
    true -> 1 + (count_matching(Pred,T));
    (_) -> (count_matching(Pred,T))
  end.


power.erl

-module(power).
-export([start/0]).

start() -> spawn(fun server/0).

server() ->
	receive
		{Pid, power, N, M} ->
			Pid ! {answer, math:pow(N,M)}
	end,
	server().


var.erl

-module (var). 
-export ([start/1]). 

start(Value) ->
    spawn(fun() -> loop(Value) end). 

loop(Value) ->
    receive
        {assign, NewVal} ->
            loop(NewVal);
        {Pid, fetch} ->
            Pid ! {value, Value}
    end,
    loop(Value). 


logger.erl

-module (logger).
-export ([start/0]).

start() ->
	spawn(fun() -> loop([]) end).

loop(Entries) ->
	receive
		{Pid, log, Entry} ->
			Pid ! {self(), logged},
			loop([Entry|Entries]);
		{Pid, fetch} ->
			Pid ! {self(), log_is, lists:reverse(Entries)}
	end,
	loop(Entries).  




HW4

InfSet.hs

module InfSet where

fromFunc :: (a -> Bool) -> (Set a)
unionSet :: Set a -> Set a -> Set a
intersectSet :: Set a -> Set a -> Set a
inSet :: a -> Set a -> Bool
complementSet :: Set a -> Set a

data Set a = Set {func :: a -> Bool}

fromFunc f = Set {func = f}

unionSet s1 s2 = Set {func = \x -> func s1 x || func s2 x}

intersectSet s1 s2 = Set {func = \x -> func s1 x && func s2 x}

inSet x s = func s x

complementSet s = Set {func = \x -> not (func s x)}


HW3

FreeQBExp.hs

module FreeQBExp where
import QBExp
import Data.List
freeQBExp :: QBExp -> [String]

freeQBExp qbe = nub (help qbe)

help (Varref s) = [s]
help (Exists s e) = [x | x <- (help e), x /= s]
help (e `Or` f) = (help e) ++ (help f)
help (Not e) = (help e) ++ []



Improve.hs

module Improve where
import StatementsExpressions
improve :: Statement -> Statement
improvexp :: Expression -> Expression

-- main function
improve (ExpStmt e) = ExpStmt (improvexp e)
improve (AssignStmt s e) = AssignStmt s (improvexp e)
improve (IfStmt (VarExp "true") s) = improve s
improve (IfStmt e s) = IfStmt (improvexp e) (improve s)

-- helper function
improvexp (VarExp s) = (VarExp s)
improvexp (NumExp n) = (NumExp n)
improvexp (BeginExp [] e) = (improvexp e)
improvexp (BeginExp s e) = (BeginExp(map improve s) (improvexp e))
improvexp (EqualsExp e1 e2) =
  if bothVarExpp e1 e2
  then VarExp "true"
  else EqualsExp (improvexp e1) (improvexp e2)
    where bothVarExpp _ _ = False



Rank.hs

module Rank where
import Data.List
rank :: (Ord a) => [a] -> [(Int, a)]

-- helper function
count _ _ [] = []
count x y (z:zs) = if ((zs == []) || (z == (head zs)))
  then ((y, z) : (count (x+1) y zs))
  else ((y, z) : (count 1 (y+x) zs))

-- rank function
rank [] = []
rank xs = count 1 1 (sort xs)





HW2

4)

Amount.hs

module Amount where
data Amount = Zero | One | Two | Three

Rotate.hs

module Rotate where
import Amount
rotate :: Amount -> (a,a,a,a) -> (a,a,a,a)

rotate Zero (w, x, y, z) = (w, x, y, z)
rotate One (w, x, y, z) = (z, w, x, y)
rotate Two (w, x, y, z) = (y, z, w, x)
rotate Three (w, x, y, z) = (x, y, z, w)

3c)

select :: ((a,b) -> Bool) -> (BinaryRelation a b) -> (BinaryRelation a b)
select pred pairs = [(x,y) | (x,y) <- pairs, pred (x,y)]


HW1

1) Average3.hs

module Average3 where
average3 :: (Double, Double, Double) -> Double
average3 (x, y, z) = (x + y + z) / 3

2)
  a) 5
  b)
      1) illegal; a string cannot be an element of a char
      2) legal
      3) illegal; a string cannot be an element of a string
      4) illegal; a list cannot be an element of a string
      5) legal
      6) illegal; a number cannot be an element of a string due to type mismatch
  c) ([3,4,7,5,8], [3,4,7,5,8])

3) Add10List.hs

module Add10List where
add10_list_rec :: [Integer] -> [Integer]
add10_list_comp :: [Integer] -> [Integer]

add10_list_comp [] = []
add10_list_comp xs = [ x+10 | x <- xs]

add10_list_rec [] = []
add10_list_rec (x:xs) = x+10 : add10_list_rec xs

4) CubeOdds.hs

module CubeOdds where
cubeOdds :: [Integer] -> [Integer]
cubeOdds [] = []
cubeOdds xs = [if odd x then (x^3) else x | x <- xs]

5) DeleteNth.hs

module DeleteNth where
deleteNth :: (Eq a) => Int -> a -> [a] -> [a]

deleteNth _ _ [] = []

deleteNth n toDelete (x:xs)
  | n == 1 =
    if toDelete == x then xs
      else x : (deleteNth 1 toDelete xs)
  | otherwise =
    if toDelete == x then x : (deleteNth (n-1) toDelete xs)
      else x : (deleteNth n toDelete xs)

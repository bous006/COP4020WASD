HW2

4)

Amount.hs

module Amount where
data Amount = Zero | One | Two | Three

Rotate.hs

module Rotate where
import Amount
rotate :: Amount -> (a,a,a,a) -> (a,a,a,a)

rotate Zero (w, x, y, z) = (w, x, y, z)
rotate One (w, x, y, z) = (z, w, x, y)
rotate Two (w, x, y, z) = (y, z, w, x)
rotate Three (w, x, y, z) = (x, y, z, w)

3c)

select :: ((a,b) -> Bool) -> (BinaryRelation a b) -> (BinaryRelation a b)
select pred pairs = [(x,y) | (x,y) <- pairs, pred (x,y)]


HW1

1) Average3.hs

module Average3 where
average3 :: (Double, Double, Double) -> Double
average3 (x, y, z) = (x + y + z) / 3

2)
  a) 5
  b)
      1) illegal; a string cannot be an element of a char
      2) legal
      3) illegal; a string cannot be an element of a string
      4) illegal; a list cannot be an element of a string
      5) legal
      6) illegal; a number cannot be an element of a string due to type mismatch
  c) ([3,4,7,5,8], [3,4,7,5,8])

3) Add10List.hs

module Add10List where
add10_list_rec :: [Integer] -> [Integer]
add10_list_comp :: [Integer] -> [Integer]

add10_list_comp [] = []
add10_list_comp xs = [ x+10 | x <- xs]

add10_list_rec [] = []
add10_list_rec (x:xs) = x+10 : add10_list_rec xs

4) CubeOdds.hs

module CubeOdds where
cubeOdds :: [Integer] -> [Integer]
cubeOdds [] = []
cubeOdds xs = [if odd x then (x^3) else x | x <- xs]

5) DeleteNth.hs

module DeleteNth where
deleteNth :: (Eq a) => Int -> a -> [a] -> [a]

deleteNth _ _ [] = []

deleteNth n toDelete (x:xs)
  | n == 1 =
    if toDelete == x then xs
      else x : (deleteNth 1 toDelete xs)
  | otherwise =
    if toDelete == x then x : (deleteNth (n-1) toDelete xs)
      else x : (deleteNth n toDelete xs)
